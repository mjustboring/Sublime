<snippet>
	<content><![CDATA[

#include <bits/stdc++.h>
using namespace std;

/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

template <class T, class C = less<T>>
using Set = tree<T, null_type,
	C, rb_tree_tag, tree_order_statistics_node_update>;
*/

const bool ____ = []() {
	ios::sync_with_stdio(0);
	cout.tie(0);
	cin.tie(0);
	return 0;
}();

template <class T>
using minh = priority_queue<T, vector<T>, greater<T>>;
template <class T>
using maxh = priority_queue<T>;

#define ll long long
#define ld long double
#define ull unsigned long long
#define pll pair<ll,ll>
#define pii pair<int,int>
#define vec vector
#define uset unordered_set
#define umap unordered_map
#define mset multiset
#define all(cont) begin(cont), end(cont)
#define allr(cont) rbegin(cont), rend(cont)
#define pub push_back
#define pob pop_back
#define puf push_front
#define pof pop_front
#define ff first
#define ss second
#define mp make_pair
#define sz(x) ((int)x.size())
#define PI 3.1415926535897932384626433832795
#define M 1000000007
#define M1 998244353
#define IMX INT_MAX
#define IMN INT_MIN
#define LMX LONG_LONG_MAX
#define LMN LONG_LONG_MIN
#define e9 1000000000
#define e18 1000000000000000000
#define sbits __builtin_popcountll
#define dist(...) distance(__VA_ARGS__)

#define _emax1(x) (*max_element(all(x)))
#define _emax2(x, y) (*max_element(x, y))
#define _emin1(x) (*min_element(all(x)))
#define _emin2(x, y) (*min_element(x, y))
#define _emaxmin(_1, _2, NAME, ...) NAME
#define emax(...) _emaxmin(__VA_ARGS__, _emax2, _emax1)(__VA_ARGS__)
#define emin(...) _emaxmin(__VA_ARGS__, _emin2, _emin1)(__VA_ARGS__)

template <class T>
constexpr ll esum(T& t) {
	return accumulate(all(t), (ll)0);
}

template <class T, class V>
constexpr V esum(T& t, V v) {
	return accumulate(all(t), v);
}

#define rep1(i, en) \
	for (long long i = 0; i <= (en); ++i)

#define rep2(i, st, en) \
	for (long long i = (st); i <= (en); ++i)

#define rep3(i, st, en, up) \
	for (long long i = (st); i <= (en); i += up)

#define _rep(_1, _2, _3, _4, NAME, ...) NAME

#define rep(...) _rep(__VA_ARGS__, rep3, rep2, rep1)(__VA_ARGS__)

#define rev1(i, en) \
	for (long long i = (en); i >= 0; --i)

#define rev2(i, st, en) \
	for (long long i = (en); i >= (st); --i)

#define rev3(i, st, en, up) \
	for (long long i = (en); i >= (st); i -= up)

#define _rev(_1, _2, _3, _4, NAME, ...) NAME

#define rev(...) _rev(__VA_ARGS__, rev3, rev2, rev1)(__VA_ARGS__)

#define each(it, cont) for (auto &it : cont)

#define repx(it, cont) \
	for (auto it = begin(cont); it != end(cont); ++it)
#define revx(it, cont) \
	for (auto it = rbegin(cont); it != rend(cont); ++it)

template <class T>
constexpr T& minz(T& a, const T& b) {
	if (b < a) a = b;
	return a;
}

template <class T>
constexpr T& maxz(T& a, const T& b) {
	if (b > a) a = b;
	return a;
}

template <class T>
T minof(const T& a) { return a; }

template <class T, class... TT>
T minof(const T& a, const TT&... b) {
	return ::min(a, minof(b...));
}

template <class T>
T maxof(const T& a) { return a; }

template <class T, class... TT>
T maxof(const T& a, const TT&... b) {
	return ::max(a, maxof(b...));
}

string sep = " ";
string enl = "\n";

void _pf(ld t) { cout << t; }
void _pf(ll t) { cout << t; }
void _pf(ull t) { cout << t; }
void _pf(int t) { cout << t; }
void _pf(char t) { cout << t; }
void _pf(bool t) { cerr << t; }
void _pf(double t) { cout << t; }
void _pf(string t) { cout << t; }
void _pf(unsigned t) { cout << t; }
void _pf(const char* t) { cout << t; }

template <class T, class V> void _pf(const pair<T, V> &p);
template <class T> void _pf(T, T);
template <class T> void _pf(const T &t) {
	_pf(all(t));
}

template <class T> void _pf(T st, T en) {
	for (T i = st++; i != en; ++i) {
		_pf(*i);
		if (st != en) {
			cout << sep; ++st;
		}
	}
}

template <class T, class V> void _pf(const pair<T, V> &p) {
	_pf(p.ff); cout << sep; _pf(p.ss);
}

void pf() { cout << enl; }
template <class T> void pf(const T& t) {
	_pf(t); cout << enl;
}
template <class T, class... TT>
void pf(const T& t, const TT&... tt) {
	_pf(t); cout << sep; pf(tt...);
}
template <class... T> void pff(const T&... t) {
	enl = " "; pf(t...); enl = "\n";
}
template <class... T>
void pfc(string _sep, string _enl, const T&... t) {
	swap(_sep, sep); swap(_enl, enl); pf(t...);
	swap(_sep, sep); swap(_enl, enl);
}

////////////////////////////////////////////////////////////////

struct Solution {
	
	$1
};

////////////////////////////////////////////////////////////////

int main() {
	
	
}

]]></content>
	<tabTrigger>contest</tabTrigger>
	<scope>source.c++</scope>
</snippet>
