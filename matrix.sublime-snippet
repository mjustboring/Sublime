<snippet>
	<content><![CDATA[

template <class T = long long>
struct MAT {
	
	vector<vector<T>> a;
	
	MAT& perform(T (*opr)(T,T), const vector<vector<T>> &b) {
		for (int i = 0; i < a.size(); ++i)
			for (int j = 0; j < a[0].size(); ++j)
				a[i][j] = opr(a[i][j], b[i][j]);
		return *this;
	}
	
	MAT& perform(T (*opr)(T,T), T v) {
		for (int i = 0; i < a.size(); ++i)
			for (int j = 0; j < a[0].size(); ++j)
				a[i][j] = opr(a[i][j], v);
		return *this;
	}
	
	MAT() {}
	MAT(int m, int n) : a(m, vector<T>(n)) {}
	MAT(int m, int n, const vector<T> &v) : a(m, vector<T>(n)) {
		for (int i = 0, k = 0; i < m && k < v.size(); ++i) {
			for (int j = 0; j < n && k < v.size(); ++j, ++k) {
				a[i][j] = v[k];
			}
		}
	}
	MAT(int m, int n, const T arr[], int size) : a(m, vector<T>(n)) {
		for (int i = 0, k = 0; i < m && k < size; ++i) {
			for (int j = 0; j < n && k < size; ++j, ++k) {
				a[i][j] = arr[k];
			}
		}
	}
	MAT(const vector<vector<T>> &a) : a(a) {}
	MAT(vector<vector<T>> &&a) : a(a) {}
	MAT(const MAT &that) : a(that.a) {}
	MAT(MAT &&that) : a(that.a) {}
	
	MAT& operator= (const MAT &that) {
		if (this != &that) a = that.a;
		return *this;
	}
	MAT& operator= (MAT &&that) {
		if (this != &that) a = that.a;
		return *this;
	}
	
	vector<T>& operator[] (const size_t i) { return a[i]; }
	
	MAT operator+ (const MAT &that) const {
		return MAT(*this).perform(add, that.a);
	}
	MAT operator- (const MAT &that) const {
		return MAT(*this).perform(sub, that.a);
	}
	MAT operator* (const MAT &that) const {
		
		auto &b = that.a;
		vector<vector<T>> c(a.size(), vector<T>(b[0].size()));
		
		for (int i = 0; i < a.size(); ++i)
			for (int j = 0; j < b[0].size(); ++j)
				for (int k = 0; k < b.size(); ++k)
					c[i][j] = add(c[i][j], mul(a[i][k], b[k][j]));
		
		return MAT(move(c));
	}
	MAT& operator+= (const MAT &that) {
		return perform(add, that.a);
	}
	MAT& operator-= (const MAT &that) {
		return perform(sub, that.a);
	}
	MAT& operator*= (const MAT &that) {
		return *this = (*this) * that;
	}
	MAT operator+ (const T &v) const {
		return MAT(*this).perform(add, v);
	}
	MAT operator- (const T &v) const {
		return MAT(*this).perform(sub, v);
	}
	MAT operator* (const T &v) const {
		return MAT(*this).perform(mul, v);
	}
	MAT& operator+= (const T &v) {
		return perform(add, v);
	}
	MAT& operator-= (const T &v) {
		return perform(sub, v);
	}
	MAT& operator*= (const T &v) {
		return perform(mul, v);
	}
	friend MAT operator- (const T &v, const MAT& obj) {
		return MAT(obj).perform(obj.sub, v).perform(obj.mul, -1);
	}
	friend MAT operator+ (const T &v, const MAT& obj) {
		return MAT(obj).perform(obj.add, v);
	}
	friend MAT operator* (const T &v, const MAT& obj) {
		return MAT(obj).perform(obj.mul, v);
	}

	friend ostream& operator<< (ostream &out, const MAT &obj) {
		
		auto &a = obj.a;
		
		for (int i = 0; i < a.size(); ++i) {
			for (int j = 0; j < a[0].size(); ++j) {
				out << a[i][j];
				if (j+1 != a[0].size()) {
					out << " ";
				}
			}
			if (i+1 != a.size()) {
				out << "\n";
			}
		}
		
		return out;
	}
	
	friend istream& operator>> (istream &in, MAT &obj) {
		
		auto &a = obj.a;
		for (int i = 0; i < a.size(); ++i)
			for (int j = 0; j < a[0].size(); ++j)
				in >> a[i][j];

		return in;
	}
	
	static MAT I(int n) {
		vector<vector<T>> a(n, vector<T>(n));
		for (int i = 0; i < n; ++i) a[i][i] = 1;
		return MAT(move(a));
	}
	
	MAT exp(unsigned long long p) const {
		MAT a = this->a;
		MAT ans = MAT<T>::I(this->a.size());
		while (p) {
			if (p & 1) ans *= a;
			if (p >>= 1) a *= a;
		}
		return ans;
	}
	
	// T (*add)(T,T) = [](T a, T b) -> T { return (a % M + b % M) % M; };
	// T (*sub)(T,T) = [](T a, T b) -> T { return (a % M - b % M + M) % M; };
	// T (*mul)(T,T) = [](T a, T b) -> T { return (a % M * b % M) % M; };
	
	T (*add)(T,T) = [](T a, T b) -> T { return a + b; };
	T (*sub)(T,T) = [](T a, T b) -> T { return a - b; };
	T (*mul)(T,T) = [](T a, T b) -> T { return a * b; };
};
$1
]]></content>
	<tabTrigger>matrix</tabTrigger>
	<scope>source.c++</scope>
</snippet>
