<snippet>
	<content><![CDATA[

template <class T>
struct PQ {

	vector<T> tree;

	static const T& none() {
		static T _none = {};
		return _none;
	}

	void heapdown(int p, int n) {

		int l = (p << 1) + 1;
		int r = (p << 1) + 2;

		if (l >= n && r >= n) return;

		int s = getmin(p, l, r, n);

		while (s != p) {
			swap(tree[s], tree[p]);
			p = s;
			l = (p << 1) + 1;
			r = (p << 1) + 2;
			s = getmin(p, l, r, n);
		}
	}

	void heapup(int i) {

		int p = (i - 1) >> 1;
		
		while (i && cmp(tree[i], tree[p])) {
			swap(tree[i], tree[p]);
			i = p;
			p = (i - 1) >> 1;
		}
	}

	int getmin(int p, int l, int r, int n) {

		int s;

		if (r < n) {
			if (!cmp(tree[l], tree[p]) && !cmp(tree[r], tree[p])) {
				s = p;
			} else if (!cmp(tree[p], tree[l]) && !cmp(tree[r], tree[l])) {
				s = l;
			} else {
				s = r;
			}
		} else if (l < n) {
			if (!cmp(tree[l], tree[p])) {
				s = p;
			} else {
				s = l;
			}
		} else {
			s = p;
		}

		return s;
	}
	
	int size() {
		return tree.size();
	}
	
	bool empty() {
		return tree.empty();
	}

	PQ() {}

	template <class TT>
	PQ(TT st, TT en) {
		while (st != en) {
			tree.push_back(*st);
			++st;
		}
		for (int i = (tree.size() >> 1) - 1; i >= 0; --i) {
			heapdown(i, tree.size());
		}
	}

	void push(const T &key) {
		tree.push_back(key);
		heapup(tree.size()-1);
	}

	T pop() {
		
		if (tree.empty()) return {};

		if (tree.size() == 1) {
			T top = move(tree.front());
			tree.pop_back();
			return top;
		}
		
		swap(tree.front(), tree.back());
		T top = move(tree.back());
		tree.pop_back();
		heapdown(0, tree.size());
		
		return top;
	}

	const T& top() {
		if (tree.size()) return tree.front();
		return none();
	}

	void sort() {

		for (int i = tree.size()-1; i; --i) {
			swap(tree[0], tree[i]);
			heapdown(0, i);
		}

		reverse(tree.begin(), tree.end());
	}

	bool cmp(T& a, T& b) {
		return a ${1:<} b;
	}
};

]]></content>
	<tabTrigger>priorityqueue</tabTrigger>
	<scope>source.c++</scope>
</snippet>
